[
    {
        "title":"Hello, <span class=\"emoji\">ðŸ¦€</span>",
        "code":"TechnologicalHumiliatingProblems",
        "content":"<p>Welcome to the tour of Rust. This is meant to be a step by step guide through the most basic features of the language.  Rust is often considered a language with a steep learning curve, I hope we can convince you there's alot to explore before we even get to complex things like generics or lifetimes.</p> <p>In this example we show Rust's support for unicode strings in this classic example.</p>"
    },
    {
        "title":"The Rust Playground",
        "code":"UnrealisticSnarlingPlanes",
        "content":"<p>This tour uses a REPL at <a href=\"https://repl.it\">https://repl.it</a></p><p>You might alternatively enjoy the Rust Playground at <a href=\"https://play.rust-lang.org\">https://play.rust-lang.org</a> for a more advanced up to date playground.</p>"
    },
    {
        "title":"Modules",
        "code":"DarkDarlingPress",
        "content":"<p>Every Rust program or library is a <b>crate</b>.</p><p>Every crate is made of a heirarchy of <b>modules</b>.</p><p>Programs start running in the root module of a crate at the <highlight>main()</highlight> function in a file called \"main.rs\".<p></p><p>Libraries have a root module in the file \"lib.rs\"</p><p>To prevent typing out full paths like <highlight>std::time::SystemTime</highlight>. The <b>use</b> keyword allows us to specify particular items from modules we want to use throughout our code without a full path. For instance <highlight>use std::time::SystemTime</highlight> allows me to just use the identifier <highlight>SystemTime</highlight> in my main function.</p><p><b>std</b> is the crate of the <b>standard library</b> of Rust which is full of useful data structures and functions for interacting with your operating system.</p><p>A searchable directory of crates created by the community can be found at <a href=\"https://crates.io/\">https://crates.io</a></p>"
    },
    {
        "title":"Exporting",
        "code":"ArcticBreakableMacroinstruction",
        "content":"<p>In Rust, we export members of a module using the <b>pub</b> keyword.</p><p>When using a module either within your own code or an external crate, you can only refer to members that have been marked public.</p><p>The code in this example is broken, add the <b>pub</b> keyword in the appropriate place to fix it.</p>"
    },
    {
        "title":"Functions",
        "code":"FickleInsistentThing",
        "content":"<p>A function can take zero or more arguments.</p><p>In this example, add takes two parameters of type <highlight>i32</highlight> (integer of 32 bit length).</p><p>Function names are always in <highlight>snake_case</highlight></p>"
    },
    {
        "title":"Variables",
        "code":"FilthyPapayawhipFrontend",
        "content":" <p>Variables are declared using the <b>let</b> keyword.</p><p>When assigning a value, Rust will be able to infer the type of your variable 99% of the time. If it cannot you may add the type to your variable declaration.</p><p>Notice how we can assign to the same variable name multiple times. This is called variable shadowing and the type can be changed for subsequent references to that name.</b></p><p>Variable names are always in <highlight>snake_case</highlight></p>"
    },
    {
        "title":"Changing values",
        "code":"SqueakyBestTwintext",
        "content":" <p>Rust cares a great deal about what values are modified. Values fall into two types:</p><ul><li><b>mutable</b> - the location in memory can be written to</li><li><b>immutable</b> - the location in memory can only be read</li></ul><p>Mutable values are always denoted with a <b>mut</b> keyword in some manner</p><p>We will have alot more to say on this concept, but for now just keep an eye out for this keyword for what things can be modified</p>"
    },
    {
        "title":"Multiple return variables",
        "code":"PoorAptLibrary",
        "content":"<p>Functions can return multiple values by returning a <b>tuple</b> of values.</p><p>The values can be referenced by their position in the tuple.</p><p>Rust supports various kinds of destructuring that we will see in many forms. It allows us to extract sub-pieces of data structures in ergonomic ways. Be on the look out!</p>"
    },
    {
        "title":"Basic types",
        "code":"FlatScentedCustomers",
        "content":"<p>Rust has a variety of familiar types <ul><li>booleans - <highlight>bool</highlight> for representing true/false</li><li>unsigned integers - <highlight>u8</highlight><highlight>u32</highlight><highlight>u64</highlight> for representing positive whole numbers</li><li>signed integers - <highlight>i8</highlight><highlight>i32</highlight><highlight>i64</highlight> for representing positive/negative whole numbers</li><li>pointer sized integers - <highlight>uint</highlight><highlight>isize</highlight> for representing indexes and sizes of things in memory</li><li>floating point - <highlight>f32</highlight><highlight>f64</highlight></li><li>text related - <highlight>str</highlight><highlight>char</highlight></li><li>tuple - <highlight>(value,value,...)</highlight> for passing fixed sequences of values on the stack<li>slices - <highlight>&[T]</highlight> for referencing views into sequences of values in memory</ul></p><p>We will be talking about a few of these in detail later.</p><p>Fair warning: text might be more complex than you are used to in other languages, since Rust is a systems programming language, it's oriented toward caring about memory issues you might not be used to. We will be going into detail on text later.</p><p>Note how numeric types can be explicitly specified by appending the type to the end of the number (e.g. <highlight>13u32</highlight>)</p>"
    },
    {
        "title":"Basic type conversion",
        "code":"SneakyBigheartedHashfunction",
        "content":"<p>Rust requires explicitness when it comes to numeric types. One cannot use a <highlight>u8</highlight> for a <highlight>u32</highlight> casually without error.</p><p>Luckily rust makes numeric type conversions very easy with the <b>as</b> keyword.</p>"
    },
    {
        "title":"Constants",
        "code":"ActiveElectricInformationtechnology",
        "content":"<p>Constants allow a us to specify a common value that's used through out our code many times efficiently.  Instead of copying values like variables where they are used, constants directly replace the text identifier where they are used with their value.</p><p>Unlike variables, constants must always have explicit types</p><p>Constant names are always in <highlight>SCREAMING_SNAKE_CASE</highlight></p>"
    }
]