---
common_words:
  en:
    chapter: Chapter
    tor: Tour of Web Assembly
    next: Next
    previous: Previous
    toc: Table of Contents
    lessons: Lessons
    untranslated: Untranslated
  de:
    tor: Tour zu Web Assembly
    next: Weiter
    previous: Zurück
    toc: Inhaltsverzeichnis
    lessons: Kapitel
    chapter: Kapitel
    untranslated: Untranslated
  ie:
    tor: Tur de Rust
    next: Sequent
    previous: Precedent
    toc: Tabelle de contenete
    lessons: Lectiones
    chapter: Capitul
    untranslated: Untranslated
  ru:
    chapter: Глава
    tor: Тур по Web Assembly
    next: Далее
    previous: Назад
    toc: Содержание
    lessons: Занятия
    untranslated: Untranslated
  es:
    chapter: Capítulo
    tor: Tour de Web Assembly
    next: Siguiente
    previous: Anterior
    toc: Tabla de Contenidos
    lessons: Unidades
    untranslated: Untranslated
  pt-br:
    chapter: Capítulo
    tor: Um tour por Web Assembly
    next: Próximo
    previous: Anterior
    toc: Índice
    lessons: Unidades
    untranslated: Untranslated
pages:
  - en:
      title: Hello, Web Assembly
      code: https://webassembly.studio/?embed&f=hvoajwx0cve
      content_markdown: |
        Welcome to the *Tour of Web Assembly*. This is meant to be a introduction to the technology 
        and how Rust can be used to power the web.

        * [English](index.html)

        If you have suggestions on content or would like to contribute to translations, 
        checkout out Tour of Web Assembly's [github repository](https://github.com/richardanaya/tour_of_rust).

        You can navigate through the tour with <span class="emoji">⬅️</span> and <span class="emoji">➡️</span>

        In this classic example we add 1 + 1, we'll go through how it's done step by step.
  - chapter: 1
    en:
      title: Chapter 1 - What Is Web Assembly?
      content_markdown: |
        Web assembly is a binary format for representating isolated executable code.  It was developed for web
        browsers as an alternative to javascript with some distinct advantages:

        * Because its a low level bytecode, it's able to perform math quickly and manage memory more concisely.
        * Web Assembly was built with existing compilers in mind, allowing native languages like C/C++ and Rust to compile to it as a target.
        * Built with isolation in mind, allowing finer grain access control.
        * Web Assembly was built rather host agnostic, allowing some people to use web assembly [outside of browsers](https://wasmer.io/) too!

        Web Assembly is often called **WASM**
  - en:
      title: Inside A Module
      content_markdown: |
        When you compile to web assembly you get a file ending in `.wasm` called a web assembly **module**.

        The module is a [binary format](https://webassembly.github.io/spec/core/index.html) full of information on how it should be setup and interacted with:
        * a list of functions
        * what functions should be exported/imported
        * what data should initially be in the wasm modules memory