- title: Глава 4 - Обобщённые типы
  content_markdown: >
    Обобщённые типы очень важны в Rust. Они используются для представления
    значений, которые

    могут быть нулевыми (nullable), обработкой ошибок, коллекциями и другими! В
    этом разделе

    мы поговорим об основополагающих обобщённых типах, которые вы, вероятно,
    будете использовать

    постоянно.
- title: Что такое Обобщённые типы?
  content_markdown: >
    Обобщённые типы позволяют частично определять `struct` или `enum`:
    компилятор создаст полностью 

    определенную версию во время компиляции, основываясь на использовании
    обобщенного типа.


    Обычно компилятор может вывести тип, увидев, в каком контексте мы его
    используем, но вы всегда можете

    явно указать тип для обобщенного типа с помощью оператора турбо-рыба `::<T>`
    (не бойтесь его).
- title: Представление ничего
  content_markdown: >
    В других языках ключевое слово `null` используется для обозначения
    отсутствия значения.

    Это ключевое слово может создавать проблемы, когда мы пытаемся использовать
    значение, но

    не проверяем `null` ли оно или нет.


    Rust не имеет `null`, но это не значит, что Rust игнорирует важность
    представления ничего!

    Рассмотрим наивную имплементацию с помощью `enum`.


    Паттерн предоставления альтернативного значения `None` или любых других так
    распространен в

    Rust, потому что в нём нет `null` значения. Обобщённые типы помогают решить
    эту ситуацию.
- title: Option
  content_markdown: >
    В Rust есть встроенный (из стандатной библиотеки) обобщённый тип `Option`,
    который допускает 

    нулевые значения без использования `null`.


    ```

    enum Option<T> {
        None,
        Some(T),
    }

    ```


    Это перечисление так распространено, что варианты этого перечисления могут
    использоваться везде: достаточно просто

    написать `Some` или `None`.
- title: Result
  content_markdown: >
    Rust имеет встроенное перечисление `Result` - оно позволяет вернуть значение
    или ошибку. 

    Это идиоматический способ обработки ошибок. 

    ```

    enum Result<T, E> {
        Ok(T),
        Err(E),
    }

    ```


    Заметьте, что шаблонный тип имеет несколько **параметрезированых типов**,
    разделенных запятой.


    Это перечисленние так распространено, что его варианты можно использовать
    везде, просто написав

    `Ok` или `Err`.
- title: Возврат результата в Main
  content_markdown: |
    Функция `main` может возвращать `Result`!
- title: Элегантная обработка ошибок
  content_markdown: >
    `Result` так часто встречается что в Rust есть могущественный оператор `?`.
    Эти две конструкции одинаковы:


    ```

    do_something_that_might_fail()?

    ```


    ```

    match do_something_that_might_fail() {
        Ok(v) => v,
        Err(e) => return Err(e), // возврат из функции
    }

    ```
- title: '"Грязная" обработка Option/Result'
  content_markdown: >
    Обрабатывать каждый `Option`/`Result` может быть очень утомительным, когда
    вы всего-то хотите

    написать немного кода по-быстрому. `Option` и `Result` имеют метод `unwrap`,
    который полезен,

    когда Вам нужно по-быстрому достать значение.


    `unwrap` работает так:


    1. Получить значение из `Option`/`Result`

    2. Если оно было `None`/`Err`, 'panic!' 


    Эти два блока кода эквивалентны:


    ```

    my_option.unwrap()

    ```


    ```

    match my_option {
        Some(v) => v,
        None => panic!("some error message generated by Rust!"),
    }

    ```


    Соответственно:


    ```

    my_result.unwrap()

    ```


    ```

    match my_result {
        Ok(v) => v,
        Err(e) => panic!("some error message generated by Rust!"),
    }

    ```


    Будь хорошим rustacean и используй `match`, где это необходимо!
- title: Векторы
  content_markdown: >
    Одни из самых полезных обобщённых типов - это коллекции. Структура `Vec` -
    это вектор, динамически изменяемый 

    массив.


    С помощью макроса `vec!` можно удобно создавать векторы, перечисляя его
    элементы. 


    `Vec` имеет метод `iter()`, который создаёт итератор по элементам вектора, а
    итератор можно 

    легко использовать в цикле `for`.


    Внутренности вектора:

    * `Vec` это структура, а внутри она содержит ссылку на массив фиксированной
    длины в куче.

    * При создании, вектор имеет вместимость по умолчанию. Когда в него
    добавляются элементы, а 

    его вместимость уже закончилось, он переалоцирует массив на куче с большей
    вместимостью, чем была.
- title: Глава 4 - Заключение
  content_markdown: >
    За одну главу мы узнали, как много силы нам дают обобщённые типы! Не
    волнуйтесь, если Вы не 

    знаете, как это все применить. На данном этапе, Вам нужно только быть
    внимательным к идеям, 

    которые Вы увидете ещё много раз. Наши функции становятся слегка громоздкие!
    В следующей 

    главе мы поговорим о важном концепте в Rust: владение.
