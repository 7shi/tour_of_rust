- title: Глава 5 - Владение и Заимствование данными
  content_markdown: >
    Rust использует уникальную парадигму для управления памятью по сравнению с
    другими языками 

    программирования. Мы посмотрим на поведение компилятора и то, как он
    проверяет код 

    постепенно, иначе Вы рискуете быть ошеломлены. Важно понимать, что все эти
    правила существуют

    не для того, чтобы сделать Вашу жизнь сложнее, а для того, чтобы
    предотвратить широкий спектр 

    ошибок.
- title: Владение
  content_markdown: >
    Создание объекта типа и **связывание** (binding) его с именем переменной
    создаёт ресурс в памяти, который будет

    валидироваться на протяжении всего своего **времени жизни** (lifetime).
    Такую переменную называют **владельцем**

    ресурса (в данном случае объекта типа).
- title: Управление ресурсами на основе области видимости
  content_markdown: >
    Rust использует последнее место использования или конец области видимости
    функции в качестве места, где делает

    свою работу деконструктор и деалоцируется ресурс.


    Термин для обозначения деконструктора и деалокации — **drop**. 


    Тонкости памяти:

    * В Rust нет сборщика мусора

    * Это может быть знакома Вам как идиома RAII (Resource Aquisition Is
    Initialization) из С++
- title: Drop по иерархии
  content_markdown: >
    Когда структура drop'ается, в начале происходит drop этой структуры, а потом
    её детей по очереди и так далее.  


    Тонкости памяти:

    * Автоматически очищая память, Rust помогает уменьшить количество утечек
    памяти

    * Ресурсы должны быть drop'нуты только один раз!
- title: Передача владения
  content_markdown: >
    Когда владелец ресурса используется в качестве аргумента функции, владение
    передаётся параметру

    этой функции. 


    После **передачи** (move) переменной, начиная с того места, где мы её
    передали, переменную больше нельзя

    использовать.


    Тонкости памяти:

    * **Передача** или **move** копирует память со стека владельца в стек
    параметров функции.
- title: Возвращение владения
  content_markdown: |
    Владение также может быть возвращено с функции.
- title: Заимствование у владельца с помощью ссылок
  content_markdown: |
    Ссылки позволяют нам заимствовать доступ к ресурсу с помощью оператора `&`.

    Ссылки drop'аются так же как и остальные ресурсы.
- title: Заимствование у владельца с правами на изменние
  content_markdown: >
    Мы также можем позаимствовать доступ к ресурсу с правами на его изменение с
    помощью 

    оператора `&mut`.


    Владелец ресурса не может быть передан (move'нут) или изменён (права на
    изменения у `&mut` ссылки), пока

    он **mut**'абельно заимствован.


    Тонкости памяти:

    * Rust предотвращает изменение ресурса более чем с одного места, так как это
    может привести

    к гонкам данных (data race).
- title: Разыменование
  content_markdown: >
    Используя `&mut` ссылки, Вы можете установить значение переменной, используя
    `*` оператор.


    Вы также можете получить копию значения, используя `*` (только если значение
    может быть скопировано. Мы поговорим о 

    копируемых типах в следующих главах).
